工厂模式：

0. 正常写类：直接写一个类
1. 出现工厂方法：但随着构造函数的参数越来越多，开始麻烦起来了。直接写在类里的一个静态方法（类方法也行）
2. 出现工厂方法的Utils文件：为了避免类中出现太多静态方法，可以把静态方法都放在一个Utils文件中。
   （单独写在一个文件里还可以更清晰，因为多个工厂函数内部可能调用到同一个其他的函数，那么这个被调用的函数就可以放在utils里，函数名前面加下划线表示私有）
3. 出现工厂类：发现可能集装在一个类中可能更好一些，可以写类属性，统一控制这些工厂方法。
   （java里必须写成类，因为函数没法单独存在）
   （工厂类还可以不停的继承，实现，扩展，父工厂类可以有2个工厂函数，子工厂类可以有2+1个工厂函数）
4. 出现工厂类的继承或实现（抽象工厂）：发现工厂类的某一个属性需要在不同的场景中频繁修改，于是开始了工厂类的继承或者实现。
   （这个属性可能是代表xx性能属性）
   （如果直接从utils方法转成抽象工厂，那还需要再写一个工厂类）
5. 抽象工厂的抽象工厂：为了让A工厂类和B工厂类统一接口，所以出“AB统一工厂”这个抽象工厂，为了让C工厂类和D工厂类统一接口，所以出“CD统一工厂”。
   然后可能会发现 CD统一工厂 和 AB统一工厂 有些重复，于是又出现了“统一工厂”这个更抽象的抽象工厂。
