用过程性、灵活性和创造性的方式来理解单例模式。《从全局变量到单例模式的自然演进过程》

0. globals.py 文件，里面定义了很多的全局变量。
1. 大字典：发现这些全局变量太多，并且有嵌套结构，可以写一个大字典。
2. 工具类：发现大字典里写函数很麻烦，并且key没有代码提示，于是把大字典改成了一个类。键值对改成了类属性
3. 单例类：发现函数需要用到一些属性。于是把类属性变成了实例属性。这就导致了需要创建实例才能用，但只用一个实例就可以了。
4. 更安全的单例类（防止外部调用产生新实例）：
     可以把类名前面加下划线，君子协议
     可以del删掉这个类名称本身，但类还是在内存中不会被垃圾回收机制清理掉。
     更安全的方法：创建单例类元类，这样创建出来的类都是一个实例了
5. 懒汉式单例模式：
     这个单例的创建过程非常消耗时间，没必要一开始就创建。可以后面真正需要的时候才创建
     但可能有线程安全问题，因为创建单例的过程不是原子操作。threading.Lock()

以上顺序不一定就是后面一种比前面一种好，只是一种扩展性增强和不断优化的思路。
可以说越是靠前，可能就越使用小轻量级的场景和项目，越是靠后，可能就越适合大型项目和复杂场景。